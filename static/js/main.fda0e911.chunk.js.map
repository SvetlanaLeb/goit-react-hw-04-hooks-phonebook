{"version":3,"sources":["components/Phonebook/Phonebook.module.css","components/ContactsItem/ContactsItem.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Contacts/Contacts.module.css","components/Phonebook/Phonebook.jsx","components/Container/Container.jsx","components/ContactsItem/ContactsItem.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","Phonebook","onSubmit","useState","name","setName","number","setNumber","handleInputChange","e","target","value","preventDefault","className","s","form","label","type","onChange","pattern","title","required","input","button","Container","children","container","ContactsItem","id","onDeleteContact","listItem","onClick","Contacts","data","list","map","Filter","propType","PropTypes","string","isRequired","func","App","defaultContacts","JSON","parse","window","localStorage","getItem","contacts","setContacts","filter","setFilter","useEffect","setItem","stringify","normalizedName","toLowerCase","find","contact","toast","error","newContact","uuidv4","prevState","currentTarget","normalizedFilter","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fda0e911.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Phonebook_form__3daUO\",\"label\":\"Phonebook_label__3Gi1u\",\"input\":\"Phonebook_input__2_Dk4\",\"button\":\"Phonebook_button__u_9ou\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactsItem_listItem__1lvno\",\"name\":\"ContactsItem_name__3oYkZ\",\"number\":\"ContactsItem_number__1Rs7-\",\"button\":\"ContactsItem_button__DS5CU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3eKgh\",\"input\":\"Filter_input__3VMNj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2AjcJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__1bZ3j\"};","import { useState } from 'react';\nimport s from './Phonebook.module.css';\n\nfunction Phonebook({ onSubmit }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    };\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit(name, number);\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}>\n                Name\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleInputChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    className={s.input}\n                />\n            </label>\n            <label className={s.label}>\n                Number\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange={handleInputChange}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    className={s.input}\n                />\n            </label>\n            <button type=\"submit\" className={s.button}>\n                Add contact\n            </button>\n        </form>\n    );\n}\n\n// class Phonebook extends Component {\n//     state = {\n//         name: '',\n//         number: '',\n//     };\n\n//     handleInputChange = e => {\n//         const { name, value } = e.currentTarget;\n//         this.setState({\n//             [name]: value,\n//         });\n//     };\n\n//     handleSubmit = e => {\n//         e.preventDefault();\n//         this.props.onSubmit(this.state);\n//         this.reset();\n//     };\n\n//     reset = () => {\n//         this.setState({ name: '', number: '' });\n//     };\n\n//     render() {\n//         return (\n//             <form onSubmit={this.handleSubmit} className={s.form}>\n//                 <label className={s.label}>\n//                     Name\n//                     <input\n//                         type=\"text\"\n//                         name=\"name\"\n//                         value={this.state.name}\n//                         onChange={this.handleInputChange}\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//                         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//                         required\n//                         className={s.input}\n//                     />\n//                 </label>\n//                 <label className={s.label}>\n//                     Number\n//                     <input\n//                         type=\"tel\"\n//                         name=\"number\"\n//                         value={this.state.number}\n//                         onChange={this.handleInputChange}\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//                         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//                         required\n//                         className={s.input}\n//                     />\n//                 </label>\n//                 <button type=\"submit\" className={s.button}>\n//                     Add contact\n//                 </button>\n//             </form>\n//         );\n//     }\n// }\n\nexport default Phonebook;\n","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\nconst Container = ({ children }) => (\n    <div className={s.container}>{children}</div>\n);\n\nContainer.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default Container;\n","import PropTypes from 'prop-types';\nimport s from './ContactsItem.module.css';\n\nconst ContactsItem = ({ id, name, number, onDeleteContact }) => (\n    <li className={s.listItem}>\n        <p className={s.name}>\n            {name}: <span className={s.number}>{number}</span>\n        </p>\n        <button className={s.button} onClick={() => onDeleteContact(id)}>\n            Delete\n        </button>\n    </li>\n);\n\nContactsItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsItem;\n","import PropTypes from 'prop-types';\nimport s from './Contacts.module.css';\nimport ContactsItem from '../ContactsItem/ContactsItem';\n\nconst Contacts = ({ data, onDeleteContact }) => (\n    <ul className={s.list}>\n        {data.map(({ id, name, number }) => (\n            <ContactsItem\n                key={id}\n                id={id}\n                name={name}\n                number={number}\n                onDeleteContact={onDeleteContact}\n            />\n        ))}\n    </ul>\n);\n\nContacts.propTypes = {\n    data: PropTypes.oneOfType([\n        PropTypes.arrayOf(\n            PropTypes.shape({\n                id: PropTypes.string.isRequired,\n                name: PropTypes.string.isRequired,\n                number: PropTypes.string.isRequired,\n            }),\n        ),\n        PropTypes.array,\n    ]),\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default Contacts;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n    <label className={s.label}>\n        Find contact by name\n        <input\n            className={s.input}\n            type=\"text\"\n            value={value}\n            onChange={onChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        ></input>\n    </label>\n);\n\nFilter.propType = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Phonebook from './components/Phonebook/Phonebook';\nimport Container from './components/Container/Container';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\n\nfunction App() {\n    const defaultContacts = [\n        { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n        { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n        { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n        { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ];\n\n    const [contacts, setContacts] = useState(\n        () =>\n            JSON.parse(window.localStorage.getItem('contacts')) ??\n            defaultContacts,\n    );\n    const [filter, setFilter] = useState('');\n\n    const formSubmitHandler = (name, number) => {\n        const normalizedName = name.toLowerCase();\n\n        const checkedForName = contacts.find(\n            contact => normalizedName === contact.name.toLowerCase(),\n        );\n\n        if (checkedForName) {\n            return toast.error(`${name} is already in contacts`);\n        }\n\n        const newContact = {\n            id: uuidv4(),\n            name,\n            number,\n        };\n\n        setContacts(prevState => [newContact, ...prevState]);\n    };\n\n    const changeFilter = e => {\n        setFilter(e.currentTarget.value);\n    };\n\n    useEffect(() => {\n        window.localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts]);\n\n    const getVisibleContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter),\n        );\n    };\n\n    const deleteContact = contactId => {\n        setContacts(prevState =>\n            prevState.filter(contact => contact.id !== contactId),\n        );\n    };\n\n    return (\n        <Container>\n            <h1>Phonebook</h1>\n            <Phonebook onSubmit={formSubmitHandler} />\n            <h2>Contacts</h2>\n            <ToastContainer />\n            <Filter value={filter} onChange={changeFilter} />\n            <Contacts\n                data={getVisibleContacts()}\n                onDeleteContact={deleteContact}\n            />\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}